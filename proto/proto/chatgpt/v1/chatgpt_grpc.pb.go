// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/chatgpt/v1/chatgpt.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatGPT_GenerateResponse_FullMethodName = "/chatgpt.v1.ChatGPT/GenerateResponse"
)

// ChatGPTClient is the client API for ChatGPT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGPTClient interface {
	GenerateResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type chatGPTClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGPTClient(cc grpc.ClientConnInterface) ChatGPTClient {
	return &chatGPTClient{cc}
}

func (c *chatGPTClient) GenerateResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ChatGPT_GenerateResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatGPTServer is the server API for ChatGPT service.
// All implementations must embed UnimplementedChatGPTServer
// for forward compatibility
type ChatGPTServer interface {
	GenerateResponse(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedChatGPTServer()
}

// UnimplementedChatGPTServer must be embedded to have forward compatible implementations.
type UnimplementedChatGPTServer struct {
}

func (UnimplementedChatGPTServer) GenerateResponse(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateResponse not implemented")
}
func (UnimplementedChatGPTServer) mustEmbedUnimplementedChatGPTServer() {}

// UnsafeChatGPTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGPTServer will
// result in compilation errors.
type UnsafeChatGPTServer interface {
	mustEmbedUnimplementedChatGPTServer()
}

func RegisterChatGPTServer(s grpc.ServiceRegistrar, srv ChatGPTServer) {
	s.RegisterService(&ChatGPT_ServiceDesc, srv)
}

func _ChatGPT_GenerateResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGPTServer).GenerateResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGPT_GenerateResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGPTServer).GenerateResponse(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatGPT_ServiceDesc is the grpc.ServiceDesc for ChatGPT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGPT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatgpt.v1.ChatGPT",
	HandlerType: (*ChatGPTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateResponse",
			Handler:    _ChatGPT_GenerateResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chatgpt/v1/chatgpt.proto",
}
